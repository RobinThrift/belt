biome_reporter := if env_var_or_default("BIOME_REPORTER", "") != "" { "--reporter="+env("BIOME_REPORTER") } else { "" }

local_bin := absolute_path("./node_modules/.bin")

serve *args="": _generate-icons _build-sqlite
    {{ local_bin }}/vite --mode development --strictPort --port 6155 {{ args }}

build: _build-sqlite install
    {{ local_bin }}/vite build --mode production
    just _generate-icons

watch mode="development": 
    {{ local_bin }}/vite build --mode {{ mode }} --watch

storybook *flags="": _generate-icons _build-sqlite
    -rm -rf .storybook/public/
    {{ local_bin }}/msw init --save false .storybook/public/
    {{ local_bin }}/storybook dev --no-open {{ flags }}

test: _build-sqlite install
    {{ local_bin }}/vitest --run

test-watch: _build-sqlite install
    {{ local_bin }}/vitest

fmt: install
    {{ local_bin }}/biome format --write ./src

lint: install
    {{ local_bin }}/biome check --write {{ biome_reporter }} ./src
    {{ local_bin }}/tsc --noEmit

typecheck: install
    {{ local_bin }}/tsc --noEmit --incremental false

typecheck-watch: install
    {{ local_bin }}/tsc --noEmit --watch

install:
    if [ ! -d node_modules/.bin ] || [ package.json -nt package-lock.json ]; then npm ci --no-audit --no-fund --install-links=false ; fi
    @echo "TypeScript:" $({{ local_bin }}/tsc --version)
    @echo "Biome:" $({{ local_bin }}/biome --version)

clean:
    rm -rf build build node_modules src/external/sqlite-wasm/build

_generate-icons:
    -mkdir build
    -rm -rf build/icons
    cp -r assets/icons build/icons
    for icon in ./build/icons/*/icon.svg; do {{ local_bin }}/pwa-assets-generator --preset minimal-2023 "$icon"; done

_generate-sql: (_install-tool "sqlc")
    {{ local_bin }}/sqlc generate -f src/storage/database/sqlite/sqlc.yaml

_build-sqlite:
    if [ ! -f ./src/external/sqlite-wasm/build/sqlite3.wasm ]; then (cd ./src/external/sqlite-wasm && ./build.sh) ; fi
    -rm -rf build/sqlite3
    -mkdir -p build/sqlite3
    cp ./src/external/sqlite-wasm/build/sqlite3.wasm build/sqlite3/sqlite3.wasm

_install-tool tool:
    cd ../.scripts/toolfetcher && go run . -to {{ local_bin }} -versionfile ../TOOL_VERSIONS {{ tool }}
