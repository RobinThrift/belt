local_bin  := absolute_path("../.bin")
version    := env_var_or_default("VERSION", "dev")

go_ldflags := env_var_or_default("GO_LDFLAGS", "") + " -X 'go.robinthrift.com/belt/internal.Version=" + version + "'"
go_buildflags := env_var_or_default("GO_BUILD_FLAGS", "-trimpath")
go_test_reporter := env("GO_TEST_REPORTER", "pkgname-and-test-fails")
go_lint_reporter := env("GO_LINT_REPORTER", "colored-line-number")

_default:
    @just --list

# run the binary locally and restart on file changes
run: (_install-tool "watchexec")
    @mkdir -p test/manual
    @BELT_LOG_LEVEL="debug" BELT_LOG_FORMAT="console" \
        BELT_ADDR="localhost:8081" \
        BELT_SECURE_COOKIES="false" \
        BELT_DATABASE_PATH="./test/manual/belt.db" \
        BELT_DATABASE_DEBUG_ENABLED="true" \
        BELT_BLOBS_DIR="./test/manual/blobs" \
        BELT_INIT_USERNAME="user" \
        BELT_INIT_PASSWORD="password" \
        {{ local_bin }}/watchexec -r -e go -- go run -trimpath -tags dev ./bin/belt

run-prod:
    cd ui && just install build
    just build
    @BELT_LOG_LEVEL="debug" BELT_LOG_FORMAT="console" \
        BELT_ADDR="localhost:8081" \
        BELT_SECURE_COOKIES="false" \
        BELT_DATABASE_PATH="./test/manual/belt.db" \
        BELT_DATABASE_DEBUG_ENABLED="true" \
        BELT_BLOBS_DIR="./test/manual/blobs" \
        BELT_INIT_USERNAME="user" \
        BELT_INIT_PASSWORD="password" \
        ./build/belt

build:
    go build -ldflags="{{go_ldflags}}" {{ go_buildflags }} -o build/belt ./bin/belt

export_report := env_var_or_default("EXPORT_REPORT", "false")
test *flags="-v -failfast -timeout 15m ./...": (_install-tool "gotestsum")
    {{ local_bin }}/gotestsum \
        {{ if export_report == "true" { "--junitfile 'tests.junit.xml' --junitfile-project-name 'go.robinthrift.com/belt' --junitfile-hide-empty-pkg" } else { "" } }} \
        --format {{ go_test_reporter }} \
        --format-hide-empty-pkg \
        -- {{ go_buildflags }} {{ flags }}

test-watch *flags="-v -failfast -timeout 15m ./...": (_install-tool "gotestsum")
    {{ local_bin }}/gotestsum --format {{ go_test_reporter }} --format-hide-empty-pkg --watch -- {{ go_buildflags }} {{ flags }}

# lint using staticcheck and golangci-lint
lint: (_install-tool "staticcheck") (_install-tool "golangci-lint") (_install-tool "sqlc") (_install-tool "vacuum")
    {{ local_bin }}/staticcheck ./...
    {{ local_bin }}/golangci-lint run --out-format={{ go_lint_reporter }} ./...
    {{ local_bin }}/sqlc -f internal/storage/database/sqlite/sqlc.yaml vet
    {{ local_bin }}/vacuum lint --ruleset ../.scripts/vacuum.yaml --details --fail-severity warn --no-banner --all-results ../api/*.openapi3.yaml

fmt:
    @go fmt ./...

new-migration name: (_install-tool "goose")
    {{ local_bin }}/goose -table migrations -dir internal/storage/database/sqlite/migrations sqlite3 tmp.db create {{ name }} sql

generate: _gen-sql _gen-api-server-stubs

clean:
    rm -rf build
    go clean -cache

_gen-sql: (_install-tool "sqlc")
    {{ local_bin }}/sqlc generate -f internal/storage/database/sqlite/sqlc.yaml

_gen-api-server-stubs: (_install-tool "oapi-codegen")
    {{ local_bin }}/oapi-codegen -generate types,std-http-server,strict-server -o ./internal/ingress/syncv1/router_gen.go -package syncv1 ../api/sync.v1.openapi3.yaml
    {{ local_bin }}/oapi-codegen -generate types,std-http-server,strict-server -o ./internal/ingress/authv1/router_gen.go -package authv1 ../api/auth.v1.openapi3.yaml
    sed -i '' -e '1s;^;//lint:file-ignore ST1005 Ignore because generated code\n//lint:file-ignore SA1029 Ignore because generated code\n;' ./internal/ingress/syncv1/router_gen.go ./internal/ingress/authv1/router_gen.go
    go fmt ./...

_install-tool tool:
    @cd ../.scripts/toolfetcher && go run . -to {{ local_bin }} -versionfile ../TOOL_VERSIONS {{ tool }}
