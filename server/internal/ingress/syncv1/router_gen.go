//lint:file-ignore ST1005 Ignore because generated code
//lint:file-ignore SA1029 Ignore because generated code
//go:build go1.22

// Package syncv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package syncv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	"go.robinthrift.com/conveyor/internal/x/httperrors"
)

const (
	TokenBearerAuthScopes = "tokenBearerAuth.Scopes"
)

// EncryptedChangelogEntriesList A list of EncryptedChangelogEntry.
type EncryptedChangelogEntriesList struct {
	Items []EncryptedChangelogEntry `json:"items"`
}

// EncryptedChangelogEntry An encrypted payload describing a change.
type EncryptedChangelogEntry struct {
	Data         []byte    `json:"data"`
	SyncClientID string    `json:"syncClientID"`
	Timestamp    time.Time `json:"timestamp"`
}

// Error Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type Error = httperrors.Error

// ErrorBadRequest Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorBadRequest = Error

// ErrorNotFound Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorNotFound = Error

// ErrorOther Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorOther = Error

// ErrorUnauthorized Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorUnauthorized = Error

// CreateChangelogEntriesRequest The list of EncryptedChangelogEntry to create.
type CreateChangelogEntriesRequest struct {
	Items []EncryptedChangelogEntry `json:"items"`
}

// RegisterClientRequest Data for the client to be reqistered with the sync server.
type RegisterClientRequest struct {
	ClientID string `json:"clientID"`
}

// UploadAttachmentParams defines parameters for UploadAttachment.
type UploadAttachmentParams struct {
	// XFilepath Full filepath of the attachment.
	XFilepath string `json:"X-Filepath"`

	// ContentEncoding Encoding of the uploaded data.
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// ListChangelogEntriesParams defines parameters for ListChangelogEntries.
type ListChangelogEntriesParams struct {
	// Since Updates to return that are newer than this timestamp
	Since time.Time `form:"since" json:"since"`
}

// CreateChangelogEntriesJSONBody defines parameters for CreateChangelogEntries.
type CreateChangelogEntriesJSONBody struct {
	Items []EncryptedChangelogEntry `json:"items"`
}

// RegisterClientJSONBody defines parameters for RegisterClient.
type RegisterClientJSONBody struct {
	ClientID string `json:"clientID"`
}

// UploadFullSyncDataParams defines parameters for UploadFullSyncData.
type UploadFullSyncDataParams struct {
	// ContentEncoding Encoding of the uploaded blob.
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// CreateChangelogEntriesJSONRequestBody defines body for CreateChangelogEntries for application/json ContentType.
type CreateChangelogEntriesJSONRequestBody CreateChangelogEntriesJSONBody

// RegisterClientJSONRequestBody defines body for RegisterClient for application/json ContentType.
type RegisterClientJSONRequestBody RegisterClientJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete an attachment
	// (DELETE /attachments)
	DeleteAttachment(w http.ResponseWriter, r *http.Request)
	// Upload an attachment
	// (POST /attachments)
	UploadAttachment(w http.ResponseWriter, r *http.Request, params UploadAttachmentParams)
	// Get list of changes since the specified timestamp.
	// (GET /changes)
	ListChangelogEntries(w http.ResponseWriter, r *http.Request, params ListChangelogEntriesParams)
	// Create new EncryptedChangelogEntries for other clients to download.
	// (POST /changes)
	CreateChangelogEntries(w http.ResponseWriter, r *http.Request)
	// Register a new client.
	// (POST /clients)
	RegisterClient(w http.ResponseWriter, r *http.Request)
	// Unregister a new client.
	// (DELETE /clients/{id})
	UnregisterClient(w http.ResponseWriter, r *http.Request, id string)
	// Get the full database.
	// (GET /full)
	GetFullSync(w http.ResponseWriter, r *http.Request)
	// Upload the full encrypted database.
	// (POST /full)
	UploadFullSyncData(w http.ResponseWriter, r *http.Request, params UploadFullSyncDataParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAttachment operation middleware
func (siw *ServerInterfaceWrapper) DeleteAttachment(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAttachment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadAttachment operation middleware
func (siw *ServerInterfaceWrapper) UploadAttachment(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadAttachmentParams

	headers := r.Header

	// ------------- Required header parameter "X-Filepath" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Filepath")]; found {
		var XFilepath string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Filepath", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Filepath", valueList[0], &XFilepath, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Filepath", Err: err})
			return
		}

		params.XFilepath = XFilepath

	} else {
		err := fmt.Errorf("Header parameter X-Filepath is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Filepath", Err: err})
		return
	}

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Content-Encoding", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Content-Encoding", Err: err})
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadAttachment(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListChangelogEntries operation middleware
func (siw *ServerInterfaceWrapper) ListChangelogEntries(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChangelogEntriesParams

	// ------------- Required query parameter "since" -------------

	if paramValue := r.URL.Query().Get("since"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "since"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "since", r.URL.Query(), &params.Since)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "since", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListChangelogEntries(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateChangelogEntries operation middleware
func (siw *ServerInterfaceWrapper) CreateChangelogEntries(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChangelogEntries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RegisterClient operation middleware
func (siw *ServerInterfaceWrapper) RegisterClient(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterClient(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UnregisterClient operation middleware
func (siw *ServerInterfaceWrapper) UnregisterClient(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UnregisterClient(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFullSync operation middleware
func (siw *ServerInterfaceWrapper) GetFullSync(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFullSync(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadFullSyncData operation middleware
func (siw *ServerInterfaceWrapper) UploadFullSyncData(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFullSyncDataParams

	headers := r.Header

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Content-Encoding", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Content-Encoding", Err: err})
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFullSyncData(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/attachments", wrapper.DeleteAttachment)
	m.HandleFunc("POST "+options.BaseURL+"/attachments", wrapper.UploadAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/changes", wrapper.ListChangelogEntries)
	m.HandleFunc("POST "+options.BaseURL+"/changes", wrapper.CreateChangelogEntries)
	m.HandleFunc("POST "+options.BaseURL+"/clients", wrapper.RegisterClient)
	m.HandleFunc("DELETE "+options.BaseURL+"/clients/{id}", wrapper.UnregisterClient)
	m.HandleFunc("GET "+options.BaseURL+"/full", wrapper.GetFullSync)
	m.HandleFunc("POST "+options.BaseURL+"/full", wrapper.UploadFullSyncData)

	return m
}

type ErrorBadRequestJSONResponse Error

type ErrorNotFoundJSONResponse Error

type ErrorOtherJSONResponse Error

type ErrorUnauthorizedJSONResponse Error

type DeleteAttachmentRequestObject struct {
}

type DeleteAttachmentResponseObject interface {
	VisitDeleteAttachmentResponse(w http.ResponseWriter) error
}

type DeleteAttachment204Response struct {
}

func (response DeleteAttachment204Response) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAttachment400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response DeleteAttachment400JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachment401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response DeleteAttachment401JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachment404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response DeleteAttachment404JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachmentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteAttachmentdefaultJSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UploadAttachmentRequestObject struct {
	Params UploadAttachmentParams
	Body   io.Reader
}

type UploadAttachmentResponseObject interface {
	VisitUploadAttachmentResponse(w http.ResponseWriter) error
}

type UploadAttachment201Response struct {
}

func (response UploadAttachment201Response) VisitUploadAttachmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UploadAttachment400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response UploadAttachment400JSONResponse) VisitUploadAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadAttachment401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response UploadAttachment401JSONResponse) VisitUploadAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UploadAttachment404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response UploadAttachment404JSONResponse) VisitUploadAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadAttachmentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UploadAttachmentdefaultJSONResponse) VisitUploadAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListChangelogEntriesRequestObject struct {
	Params ListChangelogEntriesParams
}

type ListChangelogEntriesResponseObject interface {
	VisitListChangelogEntriesResponse(w http.ResponseWriter) error
}

type ListChangelogEntries200JSONResponse EncryptedChangelogEntriesList

func (response ListChangelogEntries200JSONResponse) VisitListChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListChangelogEntries400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response ListChangelogEntries400JSONResponse) VisitListChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListChangelogEntries401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response ListChangelogEntries401JSONResponse) VisitListChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListChangelogEntries404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response ListChangelogEntries404JSONResponse) VisitListChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListChangelogEntriesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListChangelogEntriesdefaultJSONResponse) VisitListChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateChangelogEntriesRequestObject struct {
	Body *CreateChangelogEntriesJSONRequestBody
}

type CreateChangelogEntriesResponseObject interface {
	VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error
}

type CreateChangelogEntries201Response struct {
}

func (response CreateChangelogEntries201Response) VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateChangelogEntries400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response CreateChangelogEntries400JSONResponse) VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChangelogEntries401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response CreateChangelogEntries401JSONResponse) VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateChangelogEntries404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response CreateChangelogEntries404JSONResponse) VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateChangelogEntriesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateChangelogEntriesdefaultJSONResponse) VisitCreateChangelogEntriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RegisterClientRequestObject struct {
	Body *RegisterClientJSONRequestBody
}

type RegisterClientResponseObject interface {
	VisitRegisterClientResponse(w http.ResponseWriter) error
}

type RegisterClient201Response struct {
}

func (response RegisterClient201Response) VisitRegisterClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type RegisterClient400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response RegisterClient400JSONResponse) VisitRegisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RegisterClient401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response RegisterClient401JSONResponse) VisitRegisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RegisterClient404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response RegisterClient404JSONResponse) VisitRegisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RegisterClientdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RegisterClientdefaultJSONResponse) VisitRegisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UnregisterClientRequestObject struct {
	Id string `json:"id"`
}

type UnregisterClientResponseObject interface {
	VisitUnregisterClientResponse(w http.ResponseWriter) error
}

type UnregisterClient201Response struct {
}

func (response UnregisterClient201Response) VisitUnregisterClientResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UnregisterClient400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response UnregisterClient400JSONResponse) VisitUnregisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterClient401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response UnregisterClient401JSONResponse) VisitUnregisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterClient404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response UnregisterClient404JSONResponse) VisitUnregisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UnregisterClientdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UnregisterClientdefaultJSONResponse) VisitUnregisterClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetFullSyncRequestObject struct {
}

type GetFullSyncResponseObject interface {
	VisitGetFullSyncResponse(w http.ResponseWriter) error
}

type GetFullSync200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetFullSync200ApplicationoctetStreamResponse) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetFullSync303ResponseHeaders struct {
	Location string
}

type GetFullSync303Response struct {
	Headers GetFullSync303ResponseHeaders
}

func (response GetFullSync303Response) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetFullSync400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response GetFullSync400JSONResponse) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFullSync401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response GetFullSync401JSONResponse) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetFullSync404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response GetFullSync404JSONResponse) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFullSyncdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetFullSyncdefaultJSONResponse) VisitGetFullSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UploadFullSyncDataRequestObject struct {
	Params UploadFullSyncDataParams
	Body   io.Reader
}

type UploadFullSyncDataResponseObject interface {
	VisitUploadFullSyncDataResponse(w http.ResponseWriter) error
}

type UploadFullSyncData201Response struct {
}

func (response UploadFullSyncData201Response) VisitUploadFullSyncDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UploadFullSyncData400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response UploadFullSyncData400JSONResponse) VisitUploadFullSyncDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadFullSyncData401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response UploadFullSyncData401JSONResponse) VisitUploadFullSyncDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UploadFullSyncData404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response UploadFullSyncData404JSONResponse) VisitUploadFullSyncDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UploadFullSyncDatadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UploadFullSyncDatadefaultJSONResponse) VisitUploadFullSyncDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete an attachment
	// (DELETE /attachments)
	DeleteAttachment(ctx context.Context, request DeleteAttachmentRequestObject) (DeleteAttachmentResponseObject, error)
	// Upload an attachment
	// (POST /attachments)
	UploadAttachment(ctx context.Context, request UploadAttachmentRequestObject) (UploadAttachmentResponseObject, error)
	// Get list of changes since the specified timestamp.
	// (GET /changes)
	ListChangelogEntries(ctx context.Context, request ListChangelogEntriesRequestObject) (ListChangelogEntriesResponseObject, error)
	// Create new EncryptedChangelogEntries for other clients to download.
	// (POST /changes)
	CreateChangelogEntries(ctx context.Context, request CreateChangelogEntriesRequestObject) (CreateChangelogEntriesResponseObject, error)
	// Register a new client.
	// (POST /clients)
	RegisterClient(ctx context.Context, request RegisterClientRequestObject) (RegisterClientResponseObject, error)
	// Unregister a new client.
	// (DELETE /clients/{id})
	UnregisterClient(ctx context.Context, request UnregisterClientRequestObject) (UnregisterClientResponseObject, error)
	// Get the full database.
	// (GET /full)
	GetFullSync(ctx context.Context, request GetFullSyncRequestObject) (GetFullSyncResponseObject, error)
	// Upload the full encrypted database.
	// (POST /full)
	UploadFullSyncData(ctx context.Context, request UploadFullSyncDataRequestObject) (UploadFullSyncDataResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteAttachment operation middleware
func (sh *strictHandler) DeleteAttachment(w http.ResponseWriter, r *http.Request) {
	var request DeleteAttachmentRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAttachment(ctx, request.(DeleteAttachmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAttachment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAttachmentResponseObject); ok {
		if err := validResponse.VisitDeleteAttachmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadAttachment operation middleware
func (sh *strictHandler) UploadAttachment(w http.ResponseWriter, r *http.Request, params UploadAttachmentParams) {
	var request UploadAttachmentRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadAttachment(ctx, request.(UploadAttachmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadAttachment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadAttachmentResponseObject); ok {
		if err := validResponse.VisitUploadAttachmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListChangelogEntries operation middleware
func (sh *strictHandler) ListChangelogEntries(w http.ResponseWriter, r *http.Request, params ListChangelogEntriesParams) {
	var request ListChangelogEntriesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListChangelogEntries(ctx, request.(ListChangelogEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListChangelogEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListChangelogEntriesResponseObject); ok {
		if err := validResponse.VisitListChangelogEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChangelogEntries operation middleware
func (sh *strictHandler) CreateChangelogEntries(w http.ResponseWriter, r *http.Request) {
	var request CreateChangelogEntriesRequestObject

	var body CreateChangelogEntriesJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChangelogEntries(ctx, request.(CreateChangelogEntriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChangelogEntries")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateChangelogEntriesResponseObject); ok {
		if err := validResponse.VisitCreateChangelogEntriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterClient operation middleware
func (sh *strictHandler) RegisterClient(w http.ResponseWriter, r *http.Request) {
	var request RegisterClientRequestObject

	var body RegisterClientJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterClient(ctx, request.(RegisterClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterClient")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterClientResponseObject); ok {
		if err := validResponse.VisitRegisterClientResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnregisterClient operation middleware
func (sh *strictHandler) UnregisterClient(w http.ResponseWriter, r *http.Request, id string) {
	var request UnregisterClientRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UnregisterClient(ctx, request.(UnregisterClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnregisterClient")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UnregisterClientResponseObject); ok {
		if err := validResponse.VisitUnregisterClientResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFullSync operation middleware
func (sh *strictHandler) GetFullSync(w http.ResponseWriter, r *http.Request) {
	var request GetFullSyncRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFullSync(ctx, request.(GetFullSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFullSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFullSyncResponseObject); ok {
		if err := validResponse.VisitGetFullSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadFullSyncData operation middleware
func (sh *strictHandler) UploadFullSyncData(w http.ResponseWriter, r *http.Request, params UploadFullSyncDataParams) {
	var request UploadFullSyncDataRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFullSyncData(ctx, request.(UploadFullSyncDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFullSyncData")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadFullSyncDataResponseObject); ok {
		if err := validResponse.VisitUploadFullSyncDataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
