// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sync.sql

package sqlc

import (
	"context"

	"go.robinthrift.com/belt/internal/domain"
	"go.robinthrift.com/belt/internal/storage/database/sqlite/types"
)

const createFullSyncEntry = `-- name: CreateFullSyncEntry :exec
INSERT INTO full_sync_enrires (
    account_id,
    timestamp,
    size_bytes,
    sha256
) VALUES (?, ?, ?, ?)
`

type CreateFullSyncEntryParams struct {
	AccountID domain.AccountID
	Timestamp types.SQLiteDatetime
	SizeBytes int64
	Sha256    []byte
}

func (q *Queries) CreateFullSyncEntry(ctx context.Context, db DBTX, arg CreateFullSyncEntryParams) error {
	_, err := db.ExecContext(ctx, createFullSyncEntry,
		arg.AccountID,
		arg.Timestamp,
		arg.SizeBytes,
		arg.Sha256,
	)
	return err
}

const createSyncClient = `-- name: CreateSyncClient :exec
INSERT INTO sync_clients(
    public_id,
    account_id
) VALUES (?, ?)
`

type CreateSyncClientParams struct {
	PublicID  domain.SyncClientID
	AccountID domain.AccountID
}

func (q *Queries) CreateSyncClient(ctx context.Context, db DBTX, arg CreateSyncClientParams) error {
	_, err := db.ExecContext(ctx, createSyncClient, arg.PublicID, arg.AccountID)
	return err
}

const deleteSyncClientByPublicID = `-- name: DeleteSyncClientByPublicID :exec
DELETE FROM sync_clients WHERE public_id = ? AND account_id = ?
`

type DeleteSyncClientByPublicIDParams struct {
	PublicID  domain.SyncClientID
	AccountID domain.AccountID
}

func (q *Queries) DeleteSyncClientByPublicID(ctx context.Context, db DBTX, arg DeleteSyncClientByPublicIDParams) error {
	_, err := db.ExecContext(ctx, deleteSyncClientByPublicID, arg.PublicID, arg.AccountID)
	return err
}

const getLatestFullSyncEntry = `-- name: GetLatestFullSyncEntry :one
SELECT id, account_id, timestamp, size_bytes, sha256 FROM full_sync_enrires
WHERE account_id = ?
ORDER BY timestamp DESC
LIMIT 1
`

func (q *Queries) GetLatestFullSyncEntry(ctx context.Context, db DBTX, accountID domain.AccountID) (FullSyncEnrire, error) {
	row := db.QueryRowContext(ctx, getLatestFullSyncEntry, accountID)
	var i FullSyncEnrire
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Timestamp,
		&i.SizeBytes,
		&i.Sha256,
	)
	return i, err
}

const getSyncClient = `-- name: GetSyncClient :one
SELECT id, public_id, account_id, created_at, updated_at FROM sync_clients
WHERE
    public_id = ?
    AND account_id = ?
LIMIT 1
`

type GetSyncClientParams struct {
	PublicID  domain.SyncClientID
	AccountID domain.AccountID
}

func (q *Queries) GetSyncClient(ctx context.Context, db DBTX, arg GetSyncClientParams) (SyncClient, error) {
	row := db.QueryRowContext(ctx, getSyncClient, arg.PublicID, arg.AccountID)
	var i SyncClient
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.AccountID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
