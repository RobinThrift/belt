openapi: 3.0.4
info:
  title: Belt API
  description: This is the Belt REST-ish API.
  version: 0.1.0
servers:
- url: http://localhost:8081/api/v1
  description: Local development server.

security:
  - cookieAuth: []
  - tokenBearerAuth: []

tags:
- name: Memos
- name: Tags
- name: Attachments
- name: Settings
- name: APITokens

paths:
  /memos:
    get:
      parameters:
      - name: page[size]
        in: query
        required: true
        description: Number of Memos returned per page.
        schema:
          type: integer
          minimum: 0
          default: 25
          example: 25
          x-go-type: uint64
      - name: page[after]
        in: query
        required: false
        description: Marker from which to start the requested page of Memos from.
        schema:
          type: string
          format: "date-time"
          example: "2024-11-28T00:20:00+01:00"
      - name: filter[content]
        in: query
        required: false
        description: Full text search Memo content.
        schema:
          type: string
          example: "FTS copabilties with wild*cards"
      - name: filter[tag]
        in: query
        required: false
        description: Filter Memos by Tag.
        schema:
          type: string
          example: "go"
      - name: filter[created_at]
        in: query
        required: false
        description: Filter Memos by creation date (not time)
        schema:
          type: string
          format: date
          example: "2024-03-05"
      - name: op[created_at]
        in: query
        required: false
        description: Used in conjuction with the `filter[created_at]` parameter to specify the operand to use to compare the creation date.
        schema:
          type: string
          enum: ["=", "<="]
          example: "="
      - name: filter[is_archived]
        in: query
        required: false
        description: Filter by the archival status of the Memo.
        schema:
          type: boolean
          default: false
      - name: filter[is_deleted]
        in: query
        required: false
        description: Filter Memos by the deletion status.
        schema:
          type: boolean
          default: false

      operationId: ListMemos
      tags: [Memos]
      summary: List Memos paginated and filtered
      description: Retrieve a paginated list of Memos, optionally contstrained by the provided filters.

      responses:
        "200":
          description: The list of memos of the current account with pagination and filters applied.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoList"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

    post:
      operationId: CreateMemo
      tags: [Memos]
      summary: Create a new Memo
      description: Create a new Memo with content and an optional `createdAt` date, useful for importing.

      requestBody:
        $ref: "#/components/requestBodies/CreateMemoRequest"
      responses:
        "201":
          description: The memo was created succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Memo"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /memos/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: Memo ID
      schema:
        type: number
        example: 987654
        x-go-type: int64

    get:
      operationId: GetMemo
      tags: [Memos]
      summary: Get a Memo
      description: Retrieve a single Memo and it's content.

      responses:
        "200":
          description: The requested Memo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Memo"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"


    patch:
      operationId: UpdateMemo
      tags: [Memos]
      summary: Update Memo
      description: Update a Memo's content, archival or deletion status.

      requestBody:
        $ref: "#/components/requestBodies/UpdateMemoRequest"
      responses:
        "204":
          description: The memo was updated successfully.
          content: {}
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

    delete:
      operationId: DeleteMemo
      tags: [Memos]
      summary: Delete Memo
      description: Delete the Memo with the provided ID. This operation is idempotent, so calls no non-existing Memos will not fail.

      responses:
        "204":
          description: The memo was deleted successfully.
          content: {}
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /tags:
    get:
      parameters:
      - name: page[size]
        in: query
        required: true
        description: Number of Tags returned per page.
        schema:
          type: integer
          minimum: 0
          default: 100
          example: 110
          x-go-type: uint64
      - name: page[after]
        in: query
        required: false
        description: Marker from which to start the requested page of Tags from.
        schema:
          type: string
          example: tag-a
      - name: filter[prefix]
        in: query
        required: false
        description: Prefix filter.
        schema:
          type: string
          example: tag-a

      operationId: ListTags
      tags: [Tags]
      summary: List Tags
      description: Retrieve a paginated list of Tags, optionally constrained by a prefix filter.

      responses:
        "200":
          description: The list of tags of the current account with pagination optionally constrained by the prefix filter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagList"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /attachments:
    get:
      parameters:
      - name: page[size]
        in: query
        required: true
        description: Number of Attachments returned per page.
        schema:
          type: integer
          minimum: 0
          default: 100
          example: 50
          x-go-type: uint64
      - name: page[after]
        description: Marker from which to start the requested page of Attachments from.
        in: query
        required: false
        schema:
          type: string
          example: "a/b/c/doc.pdf"

      operationId: ListAttachments
      tags: [Attachments]
      summary: List Attachments paginated
      description: Retrieve a paginated list of Attachments.

      responses:
        "200":
          description: A paginated list of attachments of the current account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentList"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

    post:
      operationId: CreateAttachment
      tags: [Attachments]
      summary: Upload an attachment
      description: Upload a Memo Attachment's raw data and provide a filename.

      parameters:
      - in: header
        name: "X-Filename"
        description: Filename associated with the attachment.
        schema:
          type: string
          example: image.png
        required: true
      - in: header
        name: "Content-Encoding"
        description: Encoding of the uploaded data.
        schema:
          type: string
          example: gzip

      requestBody:
        $ref: "#/components/requestBodies/CreateAttachmentRequest"
      responses:
        "201":
          description: The atttachment was created succesfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attachment"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /attachments/{filename}:
    parameters:
    - name: filename
      in: path
      required: true
      description: Filepath of the attachment
      schema:
        type: string
        example: a/b/c/image.png

    delete:
      operationId: DeleteAttachment
      tags: [Attachments]
      summary: Delete an attachment
      description: Delete an attachment, regardless of wheither it's stil being used.

      responses:
        "204":
          description: The attachment was deleted succesfully.
          content: {}
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /settings:
    get:
      operationId: GetSettings
      tags: [Settings]
      summary: Get account's settings
      description: Retrieve all of the current account's settings.

      responses:
        "200":
          description: A map of all settings and their values.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

    patch:
      operationId: UpdateSettings
      tags: [Settings]
      summary: Update account's settings
      description: Update some or all of the current account's settings.

      requestBody:
        $ref: "#/components/requestBodies/UpdateSettingsRequest"
      responses:
        "204":
          description: The settings were updated successfully.
          content: {}
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /apitokens:
    get:
      parameters:
      - name: page[size]
        in: query
        required: true
        description: Number of API Tokens returned per page.
        schema:
          type: integer
          minimum: 0
          default: 25
          example: 25
          x-go-type: uint64
      - name: page[after]
        in: query
        required: false
        description: Marker from which to start the requested page of API Tokens from.
        schema:
          type: string
          example: "123456"

      operationId: ListAPITokens
      tags: [APITokens]
      summary: List API Tokens paginated
      description: Retrieve a paginated list of API Tokens.

      responses:
        "200":
          description: The pagianted list of API Tokens for the current account.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APITokenList"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

    post:
      operationId: CreateAPIToken
      tags: [APITokens]
      summary: Create a new API Token
      description: Create a new named API Token with the specified expiration date.

      requestBody:
        $ref: "#/components/requestBodies/CreateAPITokenRequest"
      responses:
        "201":
          description: The API Token was created succesfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "123215$abekjwe2kj123"
                required:
                - token
                example:
                    token: "123215$abekjwe2kj123"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

  /apitokens/{name}:
    parameters:
    - name: name
      in: path
      required: true
      description: API Token name
      schema:
        type: string
        example: "test-api-token"

    delete:
      operationId: DeleteAPIToken
      tags: [APITokens]
      summary: Delete API Token
      description: Delete the API Token with the provided name. Subsequent requests with this token will fail. This operation is idempotent, so calls no non-existing Memos will not fail.

      responses:
        "204":
          description: The API Token was deleted successfully.
          content: {}
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorOther"

components:
  securitySchemes:
    cookieAuth:
      description: Session based authentication primarily used by the UI
      type: apiKey
      in: cookie
      name: belt_session
    tokenBearerAuth:
      description: API Token sent as a bearer token in the header. When accessing Belt via the API this is the recommended way to pass along the API Token.
      type: http
      scheme: bearer

  schemas:
    Memo:
      description: Memos contain Markdown content that you want to keep for later.
      type: object
      properties:
          id:
            type: string
            example: "123456"
          content:
            type: string
            example: |-
              # Title
              Content of the Memo
              #tag-a #tag-b
          isArchived:
            type: boolean
            example: false
          isDeleted:
            type: boolean
            example: false
          createdBy:
            type: string
            example: "65541"
          createdAt:
            type: string
            format: date-time
            example: "2024-11-29T13:22:00.000Z"
          updatedAt:
            type: string
            format: date-time
            example: "2024-11-29T13:22:00.000Z"
      required:
      - id
      - content
      - isArchived
      - isDeleted
      - createdBy
      - createdAt
      - updatedAt
      example:
        id: "123456"
        content: |-
            # Title
            Content of the Memo
            #tag-a #tag-b
        isArchived: false
        isDeleted: false
        createdBy: "65541"
        createdAt: "2024-11-29T13:22:00.000Z"
        updatedAt: "2024-11-29T13:22:00.000Z"

    MemoList:
      type: object
      description: A paginated list of Memos. The `next` property should be used to fetch the next page.
      properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Memo"
            example:
              - id: "123545"
                content: |-
                  # Title
                  Content of the Memo
                  #tag-a #tag-b
                isArchived: false
                isDeleted: false
                createdBy:  "65541"
                createdAt: "2024-11-29T13:22:00.000Z"
                updatedAt: "2024-11-29T13:22:00.000Z"
          next:
            type: string
            format: "date-time"
            example: "2024-11-29T13:22:00.000Z"
      required:
      - items
      example:
        items:
          - content: |-
              # Title
              Content of the Memo
              #tag-a #tag-b
            id: "123545"
            isArchived: false
            isDeleted: false
            createdBy:  "65541"
            createdAt: "2024-11-29T13:22:00.000Z"
            updatedAt: "2024-11-29T13:22:00.000Z"
        next: "2024-11-29T13:22:00.000Z"

    Tag:
      type: object
      description: A single Tag that can be associated with many Memos.
      properties:
          tag:
            type: string
            example: tag-a
          count:
            type: number
            example: 10
      required:
      - tag
      - count
      example:
        tag: tag-a
        count: 10

    TagList:
      type: object
      description: A paginated list of Tags.
      properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
            example:
            - tag: tag-a
              count: 10
          next:
            type: string
            example: "a/b/c/d/image.png"
      required:
      - items
      example:
        items:
        - tag: tag-a
          count: 10
        next: "a/b/c/d/image.png"

    Attachment:
      type: object
      description: A file that can be referenced by a Memo.
      properties:
          url:
            type: string
            example: "/a/b/c/d/image.png"
          originalFilename:
            type: string
            example: "image.png"
          contentType:
            type: string
            example: "image/png"
          sizeBytes:
            type: number
            example: 50
            x-go-type: int64
          sha256:
            type: string
            example: a989d98398
          createdBy:
            type: string
            example: "12345"
          createdAt:
            type: string
            format: date-time
            example: "2024-11-29T13:22:00.000Z"
      required:
      - url
      - originalFilename
      - contentType
      - sizeBytes
      - sha256
      - createdBy
      - createdAt
      example:
        url: /a/b/c/d/image.png
        originalFilename: image.png
        contentType: image/png
        sha256: a989d98398
        sizeBytes: 50
        createdBy: "12345"
        createdAt: "2024-11-29T13:22:00.000Z"

    AttachmentList:
      type: object
      description: A paginated list of Attachments.
      properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Attachment"
            example:
            - url: /a/b/c/d/image.png
              originalFilename: image.png
              contentType: image/png
              sha256: a989d98398
              sizeBytes: 50
              createdBy: "12345"
              createdAt: "2024-11-29T13:22:00.000Z"
          next:
            type: string
            example: "a/b/c/doc.pdf"
      required:
      - items
      example:
        items:
        - url: /a/b/c/d/image.png
          originalFilename: image.png
          contentType: image/png
          sha256: a989d98398
          sizeBytes: 50
          createdBy: "12345"
          createdAt: "2024-11-29T13:22:00.000Z"
        next: "a/b/c/doc.pdf"

    Settings:
      type: object
      description: Account specific application settings.
      properties:
        locale.language:
          type: string
          example: "en"
        locale.region:
          type: string
          example: "gb"
        theme.colourScheme:
          type: string
          example: "default"
        theme.mode:
          type: string
          example: "auto"
        theme.icon:
          type: string
          example: "default"
        theme.listLayout:
          type: string
          example: "single"
        controls.vim:
          type: boolean
          example: true
        controls.doubleClickToEdit:
          type: boolean
          example: true
      required:
      - "locale.language"
      - "locale.region"
      - "theme.colourScheme"
      - "theme.mode"
      - "theme.icon"
      - "theme.listLayout"
      - "controls.vim"
      - "controls.doubleClickToEdit"
      example:
        controls.doubleClickToEdit: true
        controls.vim: true
        locale.language: en
        locale.region: gb
        theme.colourScheme: default
        theme.mode: auto
        theme.icon: default
        theme.listLayout: "single"

    APIToken:
      type: object
      description: Auth token used to access the API.
      properties:
          name:
            type: string
            example: "test-api-token"
          createdAt:
            type: string
            format: date-time
            example: "2024-11-29T13:22:00.000Z"
          expiresAt:
            type: string
            format: date-time
            example: "2024-11-29T13:22:00.000Z"
      required:
      - name
      - createdAt
      - expiresAt
      example:
        name: test-api-token
        createdAt: "2024-11-29T13:22:00.000Z"
        expiresAt: "2024-11-29T13:22:00.000Z"

    APITokenList:
      type: object
      description: A paginated list of API Tokens.
      properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/APIToken"
            example:
            - name: test-api-token
              createdAt: "2024-11-29T13:22:00.000Z"
              expiresAt: "2024-11-29T13:22:00.000Z"
          next:
            type: string
            example: "100"
      required:
      - items
      example:
        items:
        - name: test-api-token
          createdAt: "2024-11-29T13:22:00.000Z"
          expiresAt: "2024-11-29T13:22:00.000Z"
        next: "100"

    Error:
      type: object
      description: Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
      properties:
        code:
          type: integer
          example: 500
        type:
          type: string
          example: "belt/api/v1/InternalServerError"
        title:
          type: string
          example: "InternalServerError"
        detail:
          type: string
          example: "unknown error"
      required:
      - code
      - type
      - title
      - detail
      example:
        code: 500
        detail: unknown error
        title: InternalServerError
        type: belt/api/v1/InternalServerError

  requestBodies:
    CreateMemoRequest:
      description: Create a new Memo with the content provided. If the `createdAt` property is not set, the current date/time will be used.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
                example: |-
                  # Title
                  Content of the Memo
                  #tag-a #tag-b
              createdAt:
                type: string
                format: date-time
                example: "2024-11-29T13:32:25Z"
            required:
            - content
            example:
              content: Slg
              createdAt: "2024-11-29T13:32:25Z"

    UpdateMemoRequest:
      description: Update Memo content, archival or deletion status.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
                example: "Updated content"
                x-go-skip-optional-pointer: true
              isArchived:
                type: boolean
              isDeleted:
                type: boolean
            example:
              content: "Updated content"

    CreateAttachmentRequest:
      required: true
      description: The attachment's raw data.
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
            example: "0x5"

    UpdateSettingsRequest:
      required: true
      description: Update individual settings value.
      content:
        application/json:
          schema:
            type: object
            properties:
              locale.language:
                type: string
                example: "de"
              locale.region:
                type: string
                example: "de"
              theme.colourScheme:
                type: string
                example: "default"
              theme.mode:
                type: string
                example: "dark"
              theme.icon:
                type: string
                example: "default"
              theme.listLayout:
                type: string
                example: "single"
              controls.vim:
                type: boolean
              controls.doubleClickToEdit:
                type: boolean
            example:
              controls.doubleClickToEdit: true
              controls.vim: true
              locale.language: de
              locale.region: de
              theme.colourScheme: default
              theme.mode: dark
              theme.icon: default
              thems.listLayout: single

    CreateAPITokenRequest:
      description: Create a new named API Token.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "test-api-token"
              expiresAt:
                type: string
                format: date-time
                example: "2024-11-29T13:32:25Z"
            required:
            - name
            - expiresAt
            example:
              name: "test-api-token"
              expiresAt: "2024-11-29T13:32:25Z"

  responses:
    ErrorBadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            detail: Invalid request body
            title: Bad Request
            type: belt/api/v1/BadRequest
    ErrorUnauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            detail: You lack the required permissions to perform this action
            title: Unauthorized
            type: belt/api/v1/Unauthorized
    ErrorNotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            detail: The requested page could not be found
            title: Not Found
            type: belt/api/v1/NotFound
    ErrorOther:
      description: Other errors
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
