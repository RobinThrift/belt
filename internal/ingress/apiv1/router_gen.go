//lint:file-ignore ST1005 Ignore because generated code
//lint:file-ignore SA1029 Ignore because generated code
//go:build go1.22

// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv1

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes      = "cookieAuth.Scopes"
	TokenBearerAuthScopes = "tokenBearerAuth.Scopes"
)

// Defines values for ListMemosParamsOpCreatedAt.
const (
	Equal         ListMemosParamsOpCreatedAt = "="
	LessThanEqual ListMemosParamsOpCreatedAt = "<="
)

// APIToken Auth token used to access the API.
type APIToken struct {
	CreatedAt time.Time `json:"createdAt"`
	ExpiresAt time.Time `json:"expiresAt"`
	Name      string    `json:"name"`
}

// APITokenList A paginated list of API Tokens.
type APITokenList struct {
	Items []APIToken `json:"items"`
	Next  *string    `json:"next,omitempty"`
}

// Attachment A file that can be referenced by a Memo.
type Attachment struct {
	ContentType      string    `json:"contentType"`
	CreatedAt        time.Time `json:"createdAt"`
	CreatedBy        string    `json:"createdBy"`
	OriginalFilename string    `json:"originalFilename"`
	Sha256           string    `json:"sha256"`
	SizeBytes        int64     `json:"sizeBytes"`
	Url              string    `json:"url"`
}

// AttachmentList A paginated list of Attachments.
type AttachmentList struct {
	Items []Attachment `json:"items"`
	Next  *string      `json:"next,omitempty"`
}

// Error Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type Error struct {
	Code   int    `json:"code"`
	Detail string `json:"detail"`
	Title  string `json:"title"`
	Type   string `json:"type"`
}

// Memo Memos contain Markdown content that you want to keep for later.
type Memo struct {
	Content    string    `json:"content"`
	CreatedAt  time.Time `json:"createdAt"`
	CreatedBy  string    `json:"createdBy"`
	Id         string    `json:"id"`
	IsArchived bool      `json:"isArchived"`
	IsDeleted  bool      `json:"isDeleted"`
	UpdatedAt  time.Time `json:"updatedAt"`
}

// MemoList A paginated list of Memos. The `next` property should be used to fetch the next page.
type MemoList struct {
	Items []Memo     `json:"items"`
	Next  *time.Time `json:"next,omitempty"`
}

// Settings Account specific application settings.
type Settings struct {
	ControlsDoubleClickToEdit bool   `json:"controls.doubleClickToEdit"`
	ControlsVim               bool   `json:"controls.vim"`
	LocaleLanguage            string `json:"locale.language"`
	LocaleRegion              string `json:"locale.region"`
	ThemeColourScheme         string `json:"theme.colourScheme"`
	ThemeIcon                 string `json:"theme.icon"`
	ThemeMode                 string `json:"theme.mode"`
}

// Tag A single Tag that can be associated with many Memos.
type Tag struct {
	Count float32 `json:"count"`
	Tag   string  `json:"tag"`
}

// TagList A paginated list of Tags.
type TagList struct {
	Items []Tag   `json:"items"`
	Next  *string `json:"next,omitempty"`
}

// ErrorBadRequest Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorBadRequest = Error

// ErrorNotFound Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorNotFound = Error

// ErrorOther Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorOther = Error

// ErrorUnauthorized Follows RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807)
type ErrorUnauthorized = Error

// CreateAPITokenRequest defines model for CreateAPITokenRequest.
type CreateAPITokenRequest struct {
	ExpiresAt time.Time `json:"expiresAt"`
	Name      string    `json:"name"`
}

// CreateMemoRequest defines model for CreateMemoRequest.
type CreateMemoRequest struct {
	Content   string     `json:"content"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
}

// UpdateMemoRequest defines model for UpdateMemoRequest.
type UpdateMemoRequest struct {
	Content    *string `json:"content,omitempty"`
	IsArchived *bool   `json:"isArchived,omitempty"`
	IsDeleted  *bool   `json:"isDeleted,omitempty"`
}

// UpdateSettingsRequest defines model for UpdateSettingsRequest.
type UpdateSettingsRequest struct {
	ControlsDoubleClickToEdit *bool   `json:"controls.doubleClickToEdit,omitempty"`
	ControlsVim               *bool   `json:"controls.vim,omitempty"`
	LocaleLanguage            *string `json:"locale.language,omitempty"`
	LocaleRegion              *string `json:"locale.region,omitempty"`
	ThemeColourScheme         *string `json:"theme.colourScheme,omitempty"`
	ThemeIcon                 *string `json:"theme.icon,omitempty"`
	ThemeMode                 *string `json:"theme.mode,omitempty"`
}

// ListAPITokensParams defines parameters for ListAPITokens.
type ListAPITokensParams struct {
	// PageSize Number of API Tokens returned per page.
	PageSize uint64 `form:"page[size]" json:"page[size]"`

	// PageAfter Marker from which to start the requested page of API Tokens from.
	PageAfter *string `form:"page[after],omitempty" json:"page[after],omitempty"`
}

// CreateAPITokenJSONBody defines parameters for CreateAPIToken.
type CreateAPITokenJSONBody struct {
	ExpiresAt time.Time `json:"expiresAt"`
	Name      string    `json:"name"`
}

// ListAttachmentsParams defines parameters for ListAttachments.
type ListAttachmentsParams struct {
	// PageSize Number of Attachments returned per page.
	PageSize uint64 `form:"page[size]" json:"page[size]"`

	// PageAfter Marker from which to start the requested page of Attachments from.
	PageAfter *string `form:"page[after],omitempty" json:"page[after],omitempty"`
}

// CreateAttachmentParams defines parameters for CreateAttachment.
type CreateAttachmentParams struct {
	// XFilename Filename associated with the attachment.
	XFilename string `json:"X-Filename"`

	// ContentEncoding Encoding of the uploaded data.
	ContentEncoding *string `json:"Content-Encoding,omitempty"`
}

// ListMemosParams defines parameters for ListMemos.
type ListMemosParams struct {
	// PageSize Number of Memos returned per page.
	PageSize uint64 `form:"page[size]" json:"page[size]"`

	// PageAfter Marker from which to start the requested page of Memos from.
	PageAfter *time.Time `form:"page[after],omitempty" json:"page[after],omitempty"`

	// FilterContent Full text search Memo content.
	FilterContent *string `form:"filter[content],omitempty" json:"filter[content],omitempty"`

	// FilterTag Filter Memos by Tag.
	FilterTag *string `form:"filter[tag],omitempty" json:"filter[tag],omitempty"`

	// FilterCreatedAt Filter Memos by creation date (not time)
	FilterCreatedAt *openapi_types.Date `form:"filter[created_at],omitempty" json:"filter[created_at],omitempty"`

	// OpCreatedAt Used in conjuction with the `filter[created_at]` parameter to specify the operand to use to compare the creation date.
	OpCreatedAt *ListMemosParamsOpCreatedAt `form:"op[created_at],omitempty" json:"op[created_at],omitempty"`

	// FilterIsArchived Filter by the archival status of the Memo.
	FilterIsArchived *bool `form:"filter[is_archived],omitempty" json:"filter[is_archived],omitempty"`

	// FilterIsDeleted Filter Memos by the deletion status.
	FilterIsDeleted *bool `form:"filter[is_deleted],omitempty" json:"filter[is_deleted],omitempty"`
}

// ListMemosParamsOpCreatedAt defines parameters for ListMemos.
type ListMemosParamsOpCreatedAt string

// CreateMemoJSONBody defines parameters for CreateMemo.
type CreateMemoJSONBody struct {
	Content   string     `json:"content"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
}

// UpdateMemoJSONBody defines parameters for UpdateMemo.
type UpdateMemoJSONBody struct {
	Content    *string `json:"content,omitempty"`
	IsArchived *bool   `json:"isArchived,omitempty"`
	IsDeleted  *bool   `json:"isDeleted,omitempty"`
}

// UpdateSettingsJSONBody defines parameters for UpdateSettings.
type UpdateSettingsJSONBody struct {
	ControlsDoubleClickToEdit *bool   `json:"controls.doubleClickToEdit,omitempty"`
	ControlsVim               *bool   `json:"controls.vim,omitempty"`
	LocaleLanguage            *string `json:"locale.language,omitempty"`
	LocaleRegion              *string `json:"locale.region,omitempty"`
	ThemeColourScheme         *string `json:"theme.colourScheme,omitempty"`
	ThemeIcon                 *string `json:"theme.icon,omitempty"`
	ThemeMode                 *string `json:"theme.mode,omitempty"`
}

// ListTagsParams defines parameters for ListTags.
type ListTagsParams struct {
	// PageSize Number of Tags returned per page.
	PageSize uint64 `form:"page[size]" json:"page[size]"`

	// PageAfter Marker from which to start the requested page of Tags from.
	PageAfter *string `form:"page[after],omitempty" json:"page[after],omitempty"`

	// FilterPrefix Prefix filter.
	FilterPrefix *string `form:"filter[prefix],omitempty" json:"filter[prefix],omitempty"`
}

// CreateAPITokenJSONRequestBody defines body for CreateAPIToken for application/json ContentType.
type CreateAPITokenJSONRequestBody CreateAPITokenJSONBody

// CreateMemoJSONRequestBody defines body for CreateMemo for application/json ContentType.
type CreateMemoJSONRequestBody CreateMemoJSONBody

// UpdateMemoJSONRequestBody defines body for UpdateMemo for application/json ContentType.
type UpdateMemoJSONRequestBody UpdateMemoJSONBody

// UpdateSettingsJSONRequestBody defines body for UpdateSettings for application/json ContentType.
type UpdateSettingsJSONRequestBody UpdateSettingsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List API Tokens paginated
	// (GET /apitokens)
	ListAPITokens(w http.ResponseWriter, r *http.Request, params ListAPITokensParams)
	// Create a new API Token
	// (POST /apitokens)
	CreateAPIToken(w http.ResponseWriter, r *http.Request)
	// Delete API Token
	// (DELETE /apitokens/{name})
	DeleteAPIToken(w http.ResponseWriter, r *http.Request, name string)
	// List Attachments paginated
	// (GET /attachments)
	ListAttachments(w http.ResponseWriter, r *http.Request, params ListAttachmentsParams)
	// Upload an attachment
	// (POST /attachments)
	CreateAttachment(w http.ResponseWriter, r *http.Request, params CreateAttachmentParams)
	// Delete an attachment
	// (DELETE /attachments/{filename})
	DeleteAttachment(w http.ResponseWriter, r *http.Request, filename string)
	// List Memos paginated and filtered
	// (GET /memos)
	ListMemos(w http.ResponseWriter, r *http.Request, params ListMemosParams)
	// Create a new Memo
	// (POST /memos)
	CreateMemo(w http.ResponseWriter, r *http.Request)
	// Delete Memo
	// (DELETE /memos/{id})
	DeleteMemo(w http.ResponseWriter, r *http.Request, id int64)
	// Get a Memo
	// (GET /memos/{id})
	GetMemo(w http.ResponseWriter, r *http.Request, id int64)
	// Update Memo
	// (PATCH /memos/{id})
	UpdateMemo(w http.ResponseWriter, r *http.Request, id int64)
	// Get account's settings
	// (GET /settings)
	GetSettings(w http.ResponseWriter, r *http.Request)
	// Update account's settings
	// (PATCH /settings)
	UpdateSettings(w http.ResponseWriter, r *http.Request)
	// List Tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAPITokens operation middleware
func (siw *ServerInterfaceWrapper) ListAPITokens(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAPITokensParams

	// ------------- Required query parameter "page[size]" -------------

	if paramValue := r.URL.Query().Get("page[size]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page[size]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[after]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[after]", r.URL.Query(), &params.PageAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[after]", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAPITokens(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAPIToken operation middleware
func (siw *ServerInterfaceWrapper) CreateAPIToken(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAPIToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAPIToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPIToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAPIToken(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListAttachments operation middleware
func (siw *ServerInterfaceWrapper) ListAttachments(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAttachmentsParams

	// ------------- Required query parameter "page[size]" -------------

	if paramValue := r.URL.Query().Get("page[size]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page[size]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[after]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[after]", r.URL.Query(), &params.PageAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[after]", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAttachments(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAttachment operation middleware
func (siw *ServerInterfaceWrapper) CreateAttachment(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAttachmentParams

	headers := r.Header

	// ------------- Required header parameter "X-Filename" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Filename")]; found {
		var XFilename string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-Filename", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-Filename", valueList[0], &XFilename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-Filename", Err: err})
			return
		}

		params.XFilename = XFilename

	} else {
		err := fmt.Errorf("Header parameter X-Filename is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-Filename", Err: err})
		return
	}

	// ------------- Optional header parameter "Content-Encoding" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Content-Encoding")]; found {
		var ContentEncoding string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Content-Encoding", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Content-Encoding", valueList[0], &ContentEncoding, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Content-Encoding", Err: err})
			return
		}

		params.ContentEncoding = &ContentEncoding

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAttachment(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAttachment operation middleware
func (siw *ServerInterfaceWrapper) DeleteAttachment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "filename" -------------
	var filename string

	err = runtime.BindStyledParameterWithOptions("simple", "filename", r.PathValue("filename"), &filename, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filename", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAttachment(w, r, filename)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMemos operation middleware
func (siw *ServerInterfaceWrapper) ListMemos(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMemosParams

	// ------------- Required query parameter "page[size]" -------------

	if paramValue := r.URL.Query().Get("page[size]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page[size]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[after]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[after]", r.URL.Query(), &params.PageAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[after]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[content]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[content]", r.URL.Query(), &params.FilterContent)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[content]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[tag]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[tag]", r.URL.Query(), &params.FilterTag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[tag]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[created_at]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[created_at]", r.URL.Query(), &params.FilterCreatedAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[created_at]", Err: err})
		return
	}

	// ------------- Optional query parameter "op[created_at]" -------------

	err = runtime.BindQueryParameter("form", true, false, "op[created_at]", r.URL.Query(), &params.OpCreatedAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "op[created_at]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[is_archived]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[is_archived]", r.URL.Query(), &params.FilterIsArchived)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[is_archived]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[is_deleted]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[is_deleted]", r.URL.Query(), &params.FilterIsDeleted)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[is_deleted]", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMemos(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMemo operation middleware
func (siw *ServerInterfaceWrapper) CreateMemo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMemo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMemo operation middleware
func (siw *ServerInterfaceWrapper) DeleteMemo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMemo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMemo operation middleware
func (siw *ServerInterfaceWrapper) GetMemo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMemo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMemo operation middleware
func (siw *ServerInterfaceWrapper) UpdateMemo(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMemo(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSettings operation middleware
func (siw *ServerInterfaceWrapper) GetSettings(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSettings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSettings operation middleware
func (siw *ServerInterfaceWrapper) UpdateSettings(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSettings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	ctx = context.WithValue(ctx, TokenBearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagsParams

	// ------------- Required query parameter "page[size]" -------------

	if paramValue := r.URL.Query().Get("page[size]"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page[size]"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[after]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[after]", r.URL.Query(), &params.PageAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[after]", Err: err})
		return
	}

	// ------------- Optional query parameter "filter[prefix]" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter[prefix]", r.URL.Query(), &params.FilterPrefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter[prefix]", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/apitokens", wrapper.ListAPITokens)
	m.HandleFunc("POST "+options.BaseURL+"/apitokens", wrapper.CreateAPIToken)
	m.HandleFunc("DELETE "+options.BaseURL+"/apitokens/{name}", wrapper.DeleteAPIToken)
	m.HandleFunc("GET "+options.BaseURL+"/attachments", wrapper.ListAttachments)
	m.HandleFunc("POST "+options.BaseURL+"/attachments", wrapper.CreateAttachment)
	m.HandleFunc("DELETE "+options.BaseURL+"/attachments/{filename}", wrapper.DeleteAttachment)
	m.HandleFunc("GET "+options.BaseURL+"/memos", wrapper.ListMemos)
	m.HandleFunc("POST "+options.BaseURL+"/memos", wrapper.CreateMemo)
	m.HandleFunc("DELETE "+options.BaseURL+"/memos/{id}", wrapper.DeleteMemo)
	m.HandleFunc("GET "+options.BaseURL+"/memos/{id}", wrapper.GetMemo)
	m.HandleFunc("PATCH "+options.BaseURL+"/memos/{id}", wrapper.UpdateMemo)
	m.HandleFunc("GET "+options.BaseURL+"/settings", wrapper.GetSettings)
	m.HandleFunc("PATCH "+options.BaseURL+"/settings", wrapper.UpdateSettings)
	m.HandleFunc("GET "+options.BaseURL+"/tags", wrapper.ListTags)

	return m
}

type ErrorBadRequestJSONResponse Error

type ErrorNotFoundJSONResponse Error

type ErrorOtherJSONResponse Error

type ErrorUnauthorizedJSONResponse Error

type ListAPITokensRequestObject struct {
	Params ListAPITokensParams
}

type ListAPITokensResponseObject interface {
	VisitListAPITokensResponse(w http.ResponseWriter) error
}

type ListAPITokens200JSONResponse APITokenList

func (response ListAPITokens200JSONResponse) VisitListAPITokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAPITokens400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response ListAPITokens400JSONResponse) VisitListAPITokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAPITokens401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response ListAPITokens401JSONResponse) VisitListAPITokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListAPITokens404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response ListAPITokens404JSONResponse) VisitListAPITokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListAPITokensdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListAPITokensdefaultJSONResponse) VisitListAPITokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAPITokenRequestObject struct {
	Body *CreateAPITokenJSONRequestBody
}

type CreateAPITokenResponseObject interface {
	VisitCreateAPITokenResponse(w http.ResponseWriter) error
}

type CreateAPIToken201JSONResponse struct {
	Token string `json:"token"`
}

func (response CreateAPIToken201JSONResponse) VisitCreateAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIToken400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response CreateAPIToken400JSONResponse) VisitCreateAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIToken401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response CreateAPIToken401JSONResponse) VisitCreateAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIToken404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response CreateAPIToken404JSONResponse) VisitCreateAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPITokendefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateAPITokendefaultJSONResponse) VisitCreateAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAPITokenRequestObject struct {
	Name string `json:"name"`
}

type DeleteAPITokenResponseObject interface {
	VisitDeleteAPITokenResponse(w http.ResponseWriter) error
}

type DeleteAPIToken204Response struct {
}

func (response DeleteAPIToken204Response) VisitDeleteAPITokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAPIToken400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response DeleteAPIToken400JSONResponse) VisitDeleteAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIToken401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response DeleteAPIToken401JSONResponse) VisitDeleteAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIToken404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response DeleteAPIToken404JSONResponse) VisitDeleteAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPITokendefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteAPITokendefaultJSONResponse) VisitDeleteAPITokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListAttachmentsRequestObject struct {
	Params ListAttachmentsParams
}

type ListAttachmentsResponseObject interface {
	VisitListAttachmentsResponse(w http.ResponseWriter) error
}

type ListAttachments200JSONResponse AttachmentList

func (response ListAttachments200JSONResponse) VisitListAttachmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAttachments400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response ListAttachments400JSONResponse) VisitListAttachmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListAttachments401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response ListAttachments401JSONResponse) VisitListAttachmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListAttachments404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response ListAttachments404JSONResponse) VisitListAttachmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListAttachmentsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListAttachmentsdefaultJSONResponse) VisitListAttachmentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateAttachmentRequestObject struct {
	Params CreateAttachmentParams
	Body   io.Reader
}

type CreateAttachmentResponseObject interface {
	VisitCreateAttachmentResponse(w http.ResponseWriter) error
}

type CreateAttachment201JSONResponse Attachment

func (response CreateAttachment201JSONResponse) VisitCreateAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAttachment400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response CreateAttachment400JSONResponse) VisitCreateAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAttachment401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response CreateAttachment401JSONResponse) VisitCreateAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateAttachment404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response CreateAttachment404JSONResponse) VisitCreateAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateAttachmentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateAttachmentdefaultJSONResponse) VisitCreateAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteAttachmentRequestObject struct {
	Filename string `json:"filename"`
}

type DeleteAttachmentResponseObject interface {
	VisitDeleteAttachmentResponse(w http.ResponseWriter) error
}

type DeleteAttachment204Response struct {
}

func (response DeleteAttachment204Response) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAttachment400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response DeleteAttachment400JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachment401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response DeleteAttachment401JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachment404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response DeleteAttachment404JSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAttachmentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteAttachmentdefaultJSONResponse) VisitDeleteAttachmentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListMemosRequestObject struct {
	Params ListMemosParams
}

type ListMemosResponseObject interface {
	VisitListMemosResponse(w http.ResponseWriter) error
}

type ListMemos200JSONResponse MemoList

func (response ListMemos200JSONResponse) VisitListMemosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMemos400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response ListMemos400JSONResponse) VisitListMemosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListMemos401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response ListMemos401JSONResponse) VisitListMemosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListMemos404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response ListMemos404JSONResponse) VisitListMemosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListMemosdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListMemosdefaultJSONResponse) VisitListMemosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateMemoRequestObject struct {
	Body *CreateMemoJSONRequestBody
}

type CreateMemoResponseObject interface {
	VisitCreateMemoResponse(w http.ResponseWriter) error
}

type CreateMemo201JSONResponse Memo

func (response CreateMemo201JSONResponse) VisitCreateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemo400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response CreateMemo400JSONResponse) VisitCreateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemo401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response CreateMemo401JSONResponse) VisitCreateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemo404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response CreateMemo404JSONResponse) VisitCreateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateMemodefaultJSONResponse) VisitCreateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteMemoRequestObject struct {
	Id int64 `json:"id"`
}

type DeleteMemoResponseObject interface {
	VisitDeleteMemoResponse(w http.ResponseWriter) error
}

type DeleteMemo204Response struct {
}

func (response DeleteMemo204Response) VisitDeleteMemoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMemo400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response DeleteMemo400JSONResponse) VisitDeleteMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemo401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response DeleteMemo401JSONResponse) VisitDeleteMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemo404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response DeleteMemo404JSONResponse) VisitDeleteMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteMemodefaultJSONResponse) VisitDeleteMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetMemoRequestObject struct {
	Id int64 `json:"id"`
}

type GetMemoResponseObject interface {
	VisitGetMemoResponse(w http.ResponseWriter) error
}

type GetMemo200JSONResponse Memo

func (response GetMemo200JSONResponse) VisitGetMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMemo400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response GetMemo400JSONResponse) VisitGetMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMemo401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response GetMemo401JSONResponse) VisitGetMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetMemo404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response GetMemo404JSONResponse) VisitGetMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMemodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMemodefaultJSONResponse) VisitGetMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateMemoRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdateMemoJSONRequestBody
}

type UpdateMemoResponseObject interface {
	VisitUpdateMemoResponse(w http.ResponseWriter) error
}

type UpdateMemo204Response struct {
}

func (response UpdateMemo204Response) VisitUpdateMemoResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateMemo400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response UpdateMemo400JSONResponse) VisitUpdateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemo401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response UpdateMemo401JSONResponse) VisitUpdateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemo404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response UpdateMemo404JSONResponse) VisitUpdateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemodefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateMemodefaultJSONResponse) VisitUpdateMemoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSettingsRequestObject struct {
}

type GetSettingsResponseObject interface {
	VisitGetSettingsResponse(w http.ResponseWriter) error
}

type GetSettings200JSONResponse Settings

func (response GetSettings200JSONResponse) VisitGetSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSettings400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response GetSettings400JSONResponse) VisitGetSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSettings401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response GetSettings401JSONResponse) VisitGetSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSettings404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response GetSettings404JSONResponse) VisitGetSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSettingsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSettingsdefaultJSONResponse) VisitGetSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSettingsRequestObject struct {
	Body *UpdateSettingsJSONRequestBody
}

type UpdateSettingsResponseObject interface {
	VisitUpdateSettingsResponse(w http.ResponseWriter) error
}

type UpdateSettings204Response struct {
}

func (response UpdateSettings204Response) VisitUpdateSettingsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateSettings400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response UpdateSettings400JSONResponse) VisitUpdateSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSettings401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response UpdateSettings401JSONResponse) VisitUpdateSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSettings404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response UpdateSettings404JSONResponse) VisitUpdateSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSettingsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSettingsdefaultJSONResponse) VisitUpdateSettingsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
	Params ListTagsParams
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse TagList

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTags400JSONResponse struct{ ErrorBadRequestJSONResponse }

func (response ListTags400JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTags401JSONResponse struct{ ErrorUnauthorizedJSONResponse }

func (response ListTags401JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListTags404JSONResponse struct{ ErrorNotFoundJSONResponse }

func (response ListTags404JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List API Tokens paginated
	// (GET /apitokens)
	ListAPITokens(ctx context.Context, request ListAPITokensRequestObject) (ListAPITokensResponseObject, error)
	// Create a new API Token
	// (POST /apitokens)
	CreateAPIToken(ctx context.Context, request CreateAPITokenRequestObject) (CreateAPITokenResponseObject, error)
	// Delete API Token
	// (DELETE /apitokens/{name})
	DeleteAPIToken(ctx context.Context, request DeleteAPITokenRequestObject) (DeleteAPITokenResponseObject, error)
	// List Attachments paginated
	// (GET /attachments)
	ListAttachments(ctx context.Context, request ListAttachmentsRequestObject) (ListAttachmentsResponseObject, error)
	// Upload an attachment
	// (POST /attachments)
	CreateAttachment(ctx context.Context, request CreateAttachmentRequestObject) (CreateAttachmentResponseObject, error)
	// Delete an attachment
	// (DELETE /attachments/{filename})
	DeleteAttachment(ctx context.Context, request DeleteAttachmentRequestObject) (DeleteAttachmentResponseObject, error)
	// List Memos paginated and filtered
	// (GET /memos)
	ListMemos(ctx context.Context, request ListMemosRequestObject) (ListMemosResponseObject, error)
	// Create a new Memo
	// (POST /memos)
	CreateMemo(ctx context.Context, request CreateMemoRequestObject) (CreateMemoResponseObject, error)
	// Delete Memo
	// (DELETE /memos/{id})
	DeleteMemo(ctx context.Context, request DeleteMemoRequestObject) (DeleteMemoResponseObject, error)
	// Get a Memo
	// (GET /memos/{id})
	GetMemo(ctx context.Context, request GetMemoRequestObject) (GetMemoResponseObject, error)
	// Update Memo
	// (PATCH /memos/{id})
	UpdateMemo(ctx context.Context, request UpdateMemoRequestObject) (UpdateMemoResponseObject, error)
	// Get account's settings
	// (GET /settings)
	GetSettings(ctx context.Context, request GetSettingsRequestObject) (GetSettingsResponseObject, error)
	// Update account's settings
	// (PATCH /settings)
	UpdateSettings(ctx context.Context, request UpdateSettingsRequestObject) (UpdateSettingsResponseObject, error)
	// List Tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAPITokens operation middleware
func (sh *strictHandler) ListAPITokens(w http.ResponseWriter, r *http.Request, params ListAPITokensParams) {
	var request ListAPITokensRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAPITokens(ctx, request.(ListAPITokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAPITokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAPITokensResponseObject); ok {
		if err := validResponse.VisitListAPITokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAPIToken operation middleware
func (sh *strictHandler) CreateAPIToken(w http.ResponseWriter, r *http.Request) {
	var request CreateAPITokenRequestObject

	var body CreateAPITokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAPIToken(ctx, request.(CreateAPITokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAPIToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAPITokenResponseObject); ok {
		if err := validResponse.VisitCreateAPITokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAPIToken operation middleware
func (sh *strictHandler) DeleteAPIToken(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteAPITokenRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAPIToken(ctx, request.(DeleteAPITokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAPIToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAPITokenResponseObject); ok {
		if err := validResponse.VisitDeleteAPITokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAttachments operation middleware
func (sh *strictHandler) ListAttachments(w http.ResponseWriter, r *http.Request, params ListAttachmentsParams) {
	var request ListAttachmentsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAttachments(ctx, request.(ListAttachmentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAttachments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAttachmentsResponseObject); ok {
		if err := validResponse.VisitListAttachmentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAttachment operation middleware
func (sh *strictHandler) CreateAttachment(w http.ResponseWriter, r *http.Request, params CreateAttachmentParams) {
	var request CreateAttachmentRequestObject

	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAttachment(ctx, request.(CreateAttachmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAttachment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAttachmentResponseObject); ok {
		if err := validResponse.VisitCreateAttachmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAttachment operation middleware
func (sh *strictHandler) DeleteAttachment(w http.ResponseWriter, r *http.Request, filename string) {
	var request DeleteAttachmentRequestObject

	request.Filename = filename

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAttachment(ctx, request.(DeleteAttachmentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAttachment")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAttachmentResponseObject); ok {
		if err := validResponse.VisitDeleteAttachmentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMemos operation middleware
func (sh *strictHandler) ListMemos(w http.ResponseWriter, r *http.Request, params ListMemosParams) {
	var request ListMemosRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMemos(ctx, request.(ListMemosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMemos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMemosResponseObject); ok {
		if err := validResponse.VisitListMemosResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMemo operation middleware
func (sh *strictHandler) CreateMemo(w http.ResponseWriter, r *http.Request) {
	var request CreateMemoRequestObject

	var body CreateMemoJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMemo(ctx, request.(CreateMemoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMemo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateMemoResponseObject); ok {
		if err := validResponse.VisitCreateMemoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMemo operation middleware
func (sh *strictHandler) DeleteMemo(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeleteMemoRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMemo(ctx, request.(DeleteMemoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMemo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMemoResponseObject); ok {
		if err := validResponse.VisitDeleteMemoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMemo operation middleware
func (sh *strictHandler) GetMemo(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetMemoRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMemo(ctx, request.(GetMemoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMemo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMemoResponseObject); ok {
		if err := validResponse.VisitGetMemoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMemo operation middleware
func (sh *strictHandler) UpdateMemo(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdateMemoRequestObject

	request.Id = id

	var body UpdateMemoJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMemo(ctx, request.(UpdateMemoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMemo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMemoResponseObject); ok {
		if err := validResponse.VisitUpdateMemoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSettings operation middleware
func (sh *strictHandler) GetSettings(w http.ResponseWriter, r *http.Request) {
	var request GetSettingsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSettings(ctx, request.(GetSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSettings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSettingsResponseObject); ok {
		if err := validResponse.VisitGetSettingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSettings operation middleware
func (sh *strictHandler) UpdateSettings(w http.ResponseWriter, r *http.Request) {
	var request UpdateSettingsRequestObject

	var body UpdateSettingsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSettings(ctx, request.(UpdateSettingsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSettings")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSettingsResponseObject); ok {
		if err := validResponse.VisitUpdateSettingsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams) {
	var request ListTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
