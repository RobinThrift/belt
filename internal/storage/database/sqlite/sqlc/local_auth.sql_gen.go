// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: local_auth.sql

package sqlc

import (
	"context"

	"github.com/RobinThrift/belt/internal/storage/database/sqlite/types"
)

const createLocalAuthAccount = `-- name: CreateLocalAuthAccount :exec
INSERT INTO local_auth_accounts(
    username,
    algorithm,
    params,
    salt,
    password,
    requires_password_change
) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateLocalAuthAccountParams struct {
	Username               string
	Algorithm              string
	Params                 string
	Salt                   []byte
	Password               []byte
	RequiresPasswordChange bool
}

func (q *Queries) CreateLocalAuthAccount(ctx context.Context, db DBTX, arg CreateLocalAuthAccountParams) error {
	_, err := db.ExecContext(ctx, createLocalAuthAccount,
		arg.Username,
		arg.Algorithm,
		arg.Params,
		arg.Salt,
		arg.Password,
		arg.RequiresPasswordChange,
	)
	return err
}

const getLocalAuthAccountByUsername = `-- name: GetLocalAuthAccountByUsername :one
SELECT
    local_auth_accounts.id, local_auth_accounts.username, local_auth_accounts.algorithm, local_auth_accounts.params, local_auth_accounts.salt, local_auth_accounts.password, local_auth_accounts.requires_password_change, local_auth_accounts.created_at, local_auth_accounts.updated_at
FROM local_auth_accounts
WHERE username = ?
LIMIT 1
`

func (q *Queries) GetLocalAuthAccountByUsername(ctx context.Context, db DBTX, username string) (LocalAuthAccount, error) {
	row := db.QueryRowContext(ctx, getLocalAuthAccountByUsername, username)
	var i LocalAuthAccount
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Algorithm,
		&i.Params,
		&i.Salt,
		&i.Password,
		&i.RequiresPasswordChange,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateALocalAuthccount = `-- name: UpdateALocalAuthccount :exec
UPDATE local_auth_accounts SET
    algorithm = ?,
    params = ?,
    salt = ?,
    password = ?,
    requires_password_change = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateALocalAuthccountParams struct {
	Algorithm              string
	Params                 string
	Salt                   []byte
	Password               []byte
	RequiresPasswordChange bool
	UpdatedAt              types.SQLiteDatetime
	ID                     int64
}

func (q *Queries) UpdateALocalAuthccount(ctx context.Context, db DBTX, arg UpdateALocalAuthccountParams) error {
	_, err := db.ExecContext(ctx, updateALocalAuthccount,
		arg.Algorithm,
		arg.Params,
		arg.Salt,
		arg.Password,
		arg.RequiresPasswordChange,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
