// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package sqlc

import (
	"context"

	"github.com/RobinThrift/belt/internal/auth"
	"github.com/RobinThrift/belt/internal/storage/database/sqlite/types"
)

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) as count FROM accounts
`

func (q *Queries) CountAccounts(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts(
    username,
    display_name,
    is_admin,
    auth_ref
) VALUES (?, ?, ?, ?)
`

type CreateAccountParams struct {
	Username    string
	DisplayName string
	IsAdmin     bool
	AuthRef     string
}

func (q *Queries) CreateAccount(ctx context.Context, db DBTX, arg CreateAccountParams) error {
	_, err := db.ExecContext(ctx, createAccount,
		arg.Username,
		arg.DisplayName,
		arg.IsAdmin,
		arg.AuthRef,
	)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT
    accounts.id, accounts.username, accounts.display_name, accounts.is_admin, accounts.auth_ref, accounts.created_at, accounts.updated_at
FROM accounts
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, db DBTX, id auth.AccountID) (Account, error) {
	row := db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.IsAdmin,
		&i.AuthRef,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByRef = `-- name: GetAccountByRef :one
SELECT
    accounts.id, accounts.username, accounts.display_name, accounts.is_admin, accounts.auth_ref, accounts.created_at, accounts.updated_at
FROM accounts
WHERE auth_ref = ?
LIMIT 1
`

func (q *Queries) GetAccountByRef(ctx context.Context, db DBTX, authRef string) (Account, error) {
	row := db.QueryRowContext(ctx, getAccountByRef, authRef)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.IsAdmin,
		&i.AuthRef,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT
    accounts.id, accounts.username, accounts.display_name, accounts.is_admin, accounts.auth_ref, accounts.created_at, accounts.updated_at
FROM accounts
WHERE username = ?
LIMIT 1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, db DBTX, username string) (Account, error) {
	row := db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.IsAdmin,
		&i.AuthRef,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE accounts SET
    display_name = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateAccountParams struct {
	DisplayName string
	UpdatedAt   types.SQLiteDatetime
	ID          auth.AccountID
}

func (q *Queries) UpdateAccount(ctx context.Context, db DBTX, arg UpdateAccountParams) error {
	_, err := db.ExecContext(ctx, updateAccount, arg.DisplayName, arg.UpdatedAt, arg.ID)
	return err
}
