// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: settings.sql

package sqlc

import (
	"context"

	"github.com/RobinThrift/belt/internal/storage/database/sqlite/types"
)

const getSettings = `-- name: GetSettings :one
SELECT id, account_id, "key", value, created_at, updated_at FROM settings
WHERE account_id = ?
LIMIT 1
`

func (q *Queries) GetSettings(ctx context.Context, db DBTX, accountID int64) (Setting, error) {
	row := db.QueryRowContext(ctx, getSettings, accountID)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSetting = `-- name: UpsertSetting :exec
INSERT INTO settings(
    account_id,
    key,
    value
) VALUES (?, ?, ?)
ON CONFLICT (account_id, key)
DO UPDATE SET
    value = excluded.value,
    updated_at  = strftime('%Y-%m-%d %H:%M:%SZ', CURRENT_TIMESTAMP)
`

type UpsertSettingParams struct {
	AccountID int64
	Key       string
	Value     types.SQLiteJSON
}

func (q *Queries) UpsertSetting(ctx context.Context, db DBTX, arg UpsertSettingParams) error {
	_, err := db.ExecContext(ctx, upsertSetting, arg.AccountID, arg.Key, arg.Value)
	return err
}
