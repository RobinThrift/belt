// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package sqlc

import (
	"context"
	"strings"
)

const cleanupTagsWithNoCount = `-- name: CleanupTagsWithNoCount :exec
DELETE FROM tags WHERE count = 0
`

func (q *Queries) CleanupTagsWithNoCount(ctx context.Context, db DBTX) error {
	_, err := db.ExecContext(ctx, cleanupTagsWithNoCount)
	return err
}

const cleanupeMemoTagConnection = `-- name: CleanupeMemoTagConnection :many
DELETE FROM memo_tags WHERE memo_id = ?1 AND tag NOT IN (/*SLICE:tags*/?) RETURNING tag
`

type CleanupeMemoTagConnectionParams struct {
	MemoID int64
	Tags   []string
}

func (q *Queries) CleanupeMemoTagConnection(ctx context.Context, db DBTX, arg CleanupeMemoTagConnectionParams) ([]string, error) {
	query := cleanupeMemoTagConnection
	var queryParams []interface{}
	queryParams = append(queryParams, arg.MemoID)
	if len(arg.Tags) > 0 {
		for _, v := range arg.Tags {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tags*/?", strings.Repeat(",?", len(arg.Tags))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tags*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createMemoTagConnection = `-- name: CreateMemoTagConnection :exec
INSERT INTO memo_tags(
    memo_id,
    tag
) VALUES (?, ?)
ON CONFLICT (memo_id, tag) DO NOTHING
`

type CreateMemoTagConnectionParams struct {
	MemoID int64
	Tag    string
}

func (q *Queries) CreateMemoTagConnection(ctx context.Context, db DBTX, arg CreateMemoTagConnectionParams) error {
	_, err := db.ExecContext(ctx, createMemoTagConnection, arg.MemoID, arg.Tag)
	return err
}

const createTag = `-- name: CreateTag :exec
INSERT INTO tags(
    tag,
    count,
	created_by
) VALUES (?, 1, ?)
ON CONFLICT (tag)
DO UPDATE SET
    updated_at  = strftime('%Y-%m-%d %H:%M:%SZ', CURRENT_TIMESTAMP)
`

type CreateTagParams struct {
	Tag       string
	CreatedBy int64
}

func (q *Queries) CreateTag(ctx context.Context, db DBTX, arg CreateTagParams) error {
	_, err := db.ExecContext(ctx, createTag, arg.Tag, arg.CreatedBy)
	return err
}

const deleteMemoTagConnection = `-- name: DeleteMemoTagConnection :many
DELETE FROM memo_tags WHERE memo_id = ? RETURNING tag
`

func (q *Queries) DeleteMemoTagConnection(ctx context.Context, db DBTX, memoID int64) ([]string, error) {
	rows, err := db.QueryContext(ctx, deleteMemoTagConnection, memoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var tag string
		if err := rows.Scan(&tag); err != nil {
			return nil, err
		}
		items = append(items, tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, tag, count, created_by, created_at, updated_at
FROM tags
WHERE tag > ?1
ORDER BY tag ASC
LIMIT ?2
`

type ListTagsParams struct {
	PageAfter string
	PageSize  int64
}

func (q *Queries) ListTags(ctx context.Context, db DBTX, arg ListTagsParams) ([]Tag, error) {
	rows, err := db.QueryContext(ctx, listTags, arg.PageAfter, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Tag,
			&i.Count,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTagCount = `-- name: UpdateTagCount :exec
UPDATE tags SET
    count = (SELECT COUNT(*) FROM memo_tags WHERE memo_tags.tag = tags.tag),
    updated_at  = strftime('%Y-%m-%d %H:%M:%SZ', CURRENT_TIMESTAMP)
WHERE tags.tag in (/*SLICE:tags*/?)
`

func (q *Queries) UpdateTagCount(ctx context.Context, db DBTX, tags []string) error {
	query := updateTagCount
	var queryParams []interface{}
	if len(tags) > 0 {
		for _, v := range tags {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:tags*/?", strings.Repeat(",?", len(tags))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:tags*/?", "NULL", 1)
	}
	_, err := db.ExecContext(ctx, query, queryParams...)
	return err
}
